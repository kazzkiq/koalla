#!/usr/bin/env node

const sade = require("sade");
const { exec, execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

const prog = sade("koalla");
const { version } = require("../package.json");
const { red, cyan, white } = require("console-log-colors");

function toCamelCase(str) {
  return str.replace(/-([a-z])/g, function (match, letter) {
    return letter.toUpperCase();
  });
}

function toFunctionName(str) {
  return str
    .replace(/-([a-z])/g, function (match, letter) {
      return letter.toUpperCase();
    })
    .replace(/^[a-z]/, function (match) {
      return match.toUpperCase();
    });
}

function toNameStyle(str) {
  return str
    .replace(/-([a-z])/g, function (match, letter) {
      return letter.toUpperCase();
    })
    .replace(/^[a-z]/, function (match) {
      return match.toUpperCase();
    })
    .replace(/([A-Z])/g, function (match, letter) {
      return " " + letter;
    })
    .trim();
}

prog.version(version);

prog
  .command("init <directory>")
  .describe(
    "Scaffold a new project in the given directory. The directory must be ideally empty."
  )
  .option(
    "-o, --overwrite",
    "Koalla overwrites any files that already exist in the directory. Be aware."
  )
  .example("init ./my-project")
  .action((directory, opts) => {
    try {
      execSync(`mkdir -p ${directory}`);
    } catch (e) {
      console.log(
        `Koalla: ${red(` could not create the directory ${directory}.`)}`
      );
      console.log(e);
      return;
    }

    console.log("");
    console.log(`  Koalla: ${cyan("Creating project...")}`);

    let degitCommand = `npx -y degit github:kazzkiq/koalla-skeleton`;

    if (opts.o) {
      degitCommand = `npx -y degit github:kazzkiq/koalla-skeleton --force`;
    }

    exec(`cd ${directory} && ${degitCommand}`, (err, stdout, stderr) => {
      if (err) {
        if (err.message.includes("directory is not empty")) {
          console.log(
            `  Koalla: ${red(
              `The directory you're trying to use (${white(
                directory
              )}) already exists and is not empty.
          Check your directory or use ${cyan("--overwrite")}`
            )}`
          );
          console.log("");
        } else {
          console.error(`Error: ${err}`);
        }

        return;
      }

      if (
        stdout.includes("cloned kazzkiq/koalla") ||
        stderr.includes("cloned kazzkiq/koalla")
      ) {
        console.log(`  Koalla: ${cyan("Success! üåø")}`);
        console.log(cyan(""));
        console.log("  Next steps:");
        console.log(cyan(`  cd ${directory}`));
        console.log(cyan(`  npm i`));
        console.log(cyan(`  npm run dev`));
        console.log("");
        console.log(`  Open in browser: http://localhost:4000`);
        console.log(cyan(``));
        console.log(`  And that's it! Time to rock your API! üê®`);
        console.log(cyan(``));
        console.log(`  If you need help for creating routes simply run:`);
        console.log(cyan(`  npx koalla gen --help`));
        console.log("");
        console.log("");
      }
    });
  });

prog
  .command("new <action> <name>")
  .describe("Create a new route, or lib.")
  .option(
    "-o, --overwrite",
    "Koalla overwrites any files that already exist in the directory. Be aware."
  )
  .example("new route user-orders")
  .example("new lib color-shuffle")
  .action((action, name, opts) => {
    const templatesPath = path.join(__dirname, "..", "templates");

    if (!["route", "lib"].includes(action)) {
      console.log(
        `  Koalla: ${red(
          `You must use either ${white("route")} or ${white(
            "lib"
          )} as the first command.`
        )}`
      );
      console.log("");
      return;
    }

    if (!name.match(/^[a-z]+[a-z-]+[a-z]+$/)) {
      console.log(
        `  Koalla: ${red(
          `Your file must use only ${white(
            "lower-case letters [a-z]"
          )} and ${white("dashes (-)")}.`
        )}`
      );
      console.log("");
      return;
    }

    const directoryToLook = (() => {
      if (action === "route") {
        return "endpoints";
      } else if (action === "lib") {
        return "commons";
      }
    })();

    if (fs.existsSync(`./${directoryToLook}/${name}.ts`)) {
      console.log(
        `  Koalla: ${red(
          `The file ${white(
            `${name}`.ts
          )} already exists. Choose a different name.`
        )}`
      );
      return;
    }

    if (action === "route") {
      fs.writeFileSync(
        `src/routes/${name}.ts`,
        fs
          .readFileSync(`${templatesPath}/route.ts.template`, "utf8")
          .replace(/{%TAG_FILE_NAME%}/g, name)
          .replace(/{%TAG_CODE_NAME%}/g, toFunctionName(name))
          .replace(/{%TAG_NAME%}/g, toNameStyle(name))
      );

      fs.writeFileSync(
        `src/endpoints/${name}.ts`,
        fs
          .readFileSync(`${templatesPath}/endpoint.ts.template`, "utf8")
          .replace(/{%TAG_FILE_NAME%}/g, name)
          .replace(/{%TAG_CODE_NAME%}/g, toFunctionName(name))
          .replace(/{%TAG_NAME%}/g, toNameStyle(name))
      );

      fs.writeFileSync(
        `src/routes/_routes.ts`,
        fs
          .readFileSync(`src/routes/_routes.ts`, "utf8")
          .replace(
            /\.use\(([a-zA-Z]+)\)\;/g,
            `.use($1)\n  .use(${toCamelCase(name)});`
          )
          .replace(
            "const routes = new Router();",
            `import ${toCamelCase(
              name
            )} from "@/routes/${name}";\n\nconst routes = new Router();`
          )
      );

      console.log("");
      console.log(
        `  Koalla: ${cyan(
          `Route ${white(`${toFunctionName(name)}`)} sucessfully created.`
        )}`
      );
      console.log(
        `          ${cyan(`Files created: ${white(`src/routes/${name}.ts`)}`)}`
      );
      console.log(
        `          ${cyan(
          `               ${white(`src/endpoints/${name}.ts`)}`
        )}`
      );
      console.log("");
    } else if (action === "lib") {
      fs.writeFileSync(
        `src/commons/${name}.ts`,
        fs
          .readFileSync(`${templatesPath}/lib.ts.template`, "utf8")
          .replace(/{%TAG_FILE_NAME%}/g, name)
          .replace(/{%TAG_CODE_NAME%}/g, toFunctionName(name))
          .replace(/{%TAG_NAME%}/g, toNameStyle(name))
      );

      console.log("");
      console.log(
        `  Koalla: ${cyan(
          `Lib ${white(`${toFunctionName(name)}`)} sucessfully created.`
        )}`
      );
      console.log(
        `          ${cyan(`File created: ${white(`src/commons/${name}.ts`)}`)}`
      );
      console.log("");
    }
  });

prog.parse(process.argv);
